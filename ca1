import lejos.hardware.Button;
import lejos.hardware.motor.Motor;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.*;
import lejos.robotics.SampleProvider;
import lejos.utility.Delay;

public class ca1 {
    //constants for gyro
    EV3GyroSensor gyroSensor = new EV3GyroSensor(SensorPort.S3);
    //constants for touch
    EV3TouchSensor touch = new EV3TouchSensor(SensorPort.S4);
    //constants for color
    EV3ColorSensor colorSensor = new EV3ColorSensor(SensorPort.S2);
    //constants for ultraSonic
    EV3UltrasonicSensor ultraSonic = new EV3UltrasonicSensor(SensorPort.S1);


    public static void main(String[] args) {
        //CONSTANTS IN MAIN CALSS
        int value = 0; //starting value for gyro
        //
        //main process used for testing
        int speed = 720;
        int delay = 1000;
        part1();
        moveForward(speed, delay);
        turnRight(270);
        moveForward(speed, delay);
        turnLeft(270);
        moveBackward(speed, delay);
        /* plan of execution
        while loop to move forward until getDistance() == 25cm
        if true proceed into another while loop

        While angle of gyro not 180 = turn
        if true proceed into another while loop

        while loop checking for dark surface getColor == (dark)
        if true proceed into another while loop

        big while loop until hitSurface() == True
        End
         */
    }
    public static void part1(){ //putting text on screen and waiting for button press
        System.out.println("Assignment 1");
        Button.waitForAnyPress();
    }
    public static void moveForward(int x, int d){ // moving forward
        Motor.A.setSpeed(x);
        Motor.B.setSpeed(x);
        Motor.A.backward();
        Motor.B.backward();
        Delay.msDelay(d);
    }
    public static void turnRight(int x) { //turning right
        Motor.A.rotate(x);
    }
    public static void turnLeft(int x) { //turning left
        Motor.B.rotate(x);
    }
    public static void moveBackward(int x, int d){ //moving backwards
        Motor.A.setSpeed(x);
        Motor.B.setSpeed(x);
        Motor.A.forward();
        Motor.B.forward();
        Delay.msDelay(d);
    }
    public SampleProvider getDistance(){ //getting distance to object
        SampleProvider distance = ultraSonic.getDistanceMode();
        return distance; //potentially turn into boolean
    }
    public int getColor(){ //getting color
        int color;
        color = colorSensor.getColorID();
        return color; //potentailly turn into boolean
    }

    public SensorMode hitSurface(){
        SensorMode isTouching;
        isTouching = touch.getTouchMode();
        return isTouching; //boolean???
    }

    public int readAngle(int value){
        SampleProvider gyro = gyroSensor.getAngleMode();
        float [] sample = new float[gyro.sampleSize()];
        value = (int)sample[0];
        return value;
    }
}
